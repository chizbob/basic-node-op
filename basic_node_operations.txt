####Questions
1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.
A: 

[sort] 
how they work: sort lines of text in the file
Output: 

sokim-mn1:basic-node-operations sokim$ sort commands.js







          done(data);
          if (err) throw err;
       break;
       break;
       commandLibrary.cat(userInputArray.slice(1));
       commandLibrary.echo(userInputArray.slice(1).join(" "));
       done(userInput);
      //we will add the functionality of echo next within the object commandLibrary
      const fileName = fullPath[0];
      fs.readFile(fileName, (err, data) => {
      });
     case "cat":
     case "echo":
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
   "cat": function(fullPath) {
   "echo": function(userInput) {
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
   }
   },
  //parses the user input to understand which command was typed
  }
 const commandLibrary = {
 function done(output) {
 function evaluateCmd(userInput) {
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 }
 };
//where we will store our commands
//where we will store the logic of our commands
//write out data
const fs = require("fs"); 

[wc]
How they work: print newline, word, and byte counts for each file
Output: 
sokim-mn1:basic-node-operations sokim$ wc commands.js
      43     113    1078 commands.js

[uniq]
How they work: report or omit repeated lines
Output: 
sokim-mn1:basic-node-operations sokim$ uniq commands.js
const fs = require("fs");

//write out data
 function done(output) {
     process.stdout.write(output);
     process.stdout.write('\nprompt > ');
 }

//where we will store our commands
 function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
   const userInputArray = userInput.split(" ");
   const command = userInputArray[0];

   switch (command) {
     case "echo":
      //we will add the functionality of echo next within the object commandLibrary
       commandLibrary.echo(userInputArray.slice(1).join(" "));
       break;

     case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       break;
   }
 }

//where we will store the logic of our commands
 const commandLibrary = {
   "echo": function(userInput) {
       done(userInput);
   },

   "cat": function(fullPath) {
      const fileName = fullPath[0];
      fs.readFile(fileName, (err, data) => {
          if (err) throw err;
          done(data);
      });
  }
 };

 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;



2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.
A: 
> ^Csokim-mn1:basic-node-operations sokim$ cat commands.js | wc
      43     113    1078

cat command and wc were used in one line, so the content of the file were summed up in # of lines, words and then characters. 


####Programming Questions 
3. Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

4. Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).


5. It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.

Hint: Use the default: case in your switch statement.

6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.
